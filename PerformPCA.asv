
function [principal_angles, mean_transformed_dist, Irb, Ixb, Iyb, transformed_angles, transformed_dist_um] = PerformPCA(angles, distances, pixel_size)


% This function reads performs principal component analysis (PCA) on spheroid persistence speed data
% 
% Image quantification MATLAB script for 3D spheroid migration
% Rozanne Mungai Billiar Lab; September 2023


%% Perform PCA for all spheroids in expt 

% (!) USER INPUT: load the compiled dynamic and static variables 
%   - for each expt (with individual spheroid persistent speed data)

% Initialize cells to store results
principal_angles = zeros(length(distances),2);
mean_transformed_dist = zeros(length(distances),2);
transformed_angles = cell(size(distances));
transformed_dist_um = cell(size(distances));
transformed_dist = cell(size(distances));
transformed_dist = cell(size(distances));

Irb = zeros(length(distances),1);
Ixb = zeros(length(distances),1);
Iyb = zeros(length(distances),1);

% Begin loop through number of spheroids in expt
for i = 1:size(distances,2)

    %Convert polar coordinate system back to xy-cartesian ............
    % - angles are in units of radians
    dist_xy_um = zeros(length(angles{i}), 2);
    dist_xy_um(:,1) = distances{i}.*cos(angles{i});
    dist_xy_um(:,2) = distances{i}.*sin(angles{i});


    % Calculate PCA of data ..........................................
    % - coeff: principal component directions (eigenvectors)
    % - - each column of coeff contains coefficients for one principal component
    % - score: transformed data (velocities) in the principal component space
    % - latent: magnitude of variance in data (eigenvalues)
    
    [coeff, score, latent] = pca(dist_xy_um);

    % - pca function scales data to have unit variance 

    
    %Convert transformed velocities to angles and speeds ............
    transformed_angles{i} = atan2(score(:,2),score(:,1)); 
    transformed_dist_um{i} = sqrt((score(:,2)).^2 + (score(:,1)).^2);


    % Convert results to principal angles and speeds ..................
    % - Calc principal angles in degrees 
    prin_angle1 = wrapTo360(atan2d(coeff(2,1),coeff(1,1)));
    prin_angle2 = wrapTo360(atan2d(coeff(2,2),coeff(1,2)));

    % - Calc mean transformed speeds at the principal angles
    mt_dist1 = mean(abs(score(:,1)));
    mt_dist2 = mean(abs(score(:,2)));

    %Assign final variables to new array ...............................
    % - Larger differences along the prin speeds means there is a large
    % difference in invasion directions
    principal_angles(i,:) = [prin_angle1, prin_angle2]; 
    mean_transformed_dist(i,:) = [mt_dist1, mt_dist2];

    


    %% Plot the pixels along the prinicple angles .........
        
    % - Distance (mm) from boundary vs angle values polar plot
    %---essentially the same as distance plot
    
    
    % Plot original data . . . . . . . . . . . . . . . . . 
    figure

    % - plot pixels - - -
    distances_mm = distances{i}/1e3;
    polarplot(angles{i}, distances_mm, '.') 
    title ('Distance (mm) vs migration angle (deg)')
    
    % - Set figure size: 
    % - https://www.mathworks.com/help/matlab/ref/figure.html#buich1u-1_sep_shared-Position
    set(gca,'Fontname','arial', 'FontSize',14, 'OuterPosition', [0 0.2 1 0.75]);


    % - Add annotation about PCA
    annstr = {strcat('Principal angles (deg): (', num2str(principal_angles(i,:)), ')') , ...
        strcat('Mean transformed dist (mm): (', num2str(mean_transformed_dist(i,:)/1e3), ')')} ; 
    annpos = [0.20 0.08 0.5 0.1]; % annotation position in figure coordinates
    ann = annotation('textbox',annpos,'string',annstr, 'FitBoxtoText', 'on', 'EdgeColor', 'none', 'FontSize', 14);

    

    % - plot principal angles - -
    hold on

    a1 = deg2rad( [principal_angles(i,1), principal_angles(i,1)]);
    s1 = [-max(distances_mm(:,1)) max(distances_mm(:,1))];
    a2 = deg2rad( [principal_angles(i,2), principal_angles(i,2)]);
    s2 = [-max(distances_mm(:,1)) max(distances_mm(:,1))];
    polarplot(a1, s1, "b", a2, s2, "k") 
    
    hold off

    %legend('', 'principal', 'Secondary', 'Location', 'bestoutside', 'Orientation','horizontal')
    

    % Plot transformed data  . . . . . . . . . . . . . . . . . 
    figure
    polarplot(transformed_angles{i}, transformed_dist_um{i}/1e3, '.') 
    title ('Transformed distance (mm) vs migration angle (deg)')
    set(gca,'Fontname','arial', 'FontSize',14, 'OuterPosition', [0 0.2 1 0.75]);
    
    hold on

    a3 = deg2rad([0 0]);
    s3 = [-max(distances_mm(:,1)) max(distances_mm(:,1))];
    a4 = deg2rad([90 90]);
    s4 = [-max(distances_mm(:,1)) max(distances_mm(:,1))];
    polarplot(a3, s3, "b", a4, s4, "k") 
    
    
        

    %% Compute New Distances and Directional Moment of inertia after Transformation

    %Calculate distances from boundary in *pixels* (current units are microns)
    
    transformed_dist{i} = ((transformed_dist_um{i}))./pixel_size;
    %principal_outer_distances = ((principal_speeds)*(num_days*24*60) )./pixel_size;
    transformed_dist_xy{i} = (score)./pixel_size;



    %Calculate moments of inertia from boundary
    a = 1; %area for calculation - in this case = 1 bc pixels
    Irb(i) = sum(transformed_dist{i}.^2 * a);
    Ixb(i) = sum(transformed_dist_xy{i}(:,2).^2 * a);
    Iyb(i) = sum(transformed_dist_xy{i}(:,1).^2 * a);



end 

disp('PCA complete')


end


